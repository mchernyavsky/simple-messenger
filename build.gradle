buildscript {
    ext.kotlin_version = '1.1.2-4'
    ext.kotlinVersion = '1.1.2'
    ext.grpcVersion = '1.3.0'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'kotlin'

plugins {
    id "com.google.protobuf" version "0.8.1"
    id "java"
    id "kotlin"
    id "application"
    id "idea"
}

group 'ru.spbau.mit.softwaredesign'
version '1.0-SNAPSHOT'

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:3.2.0"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }

    generatedFilesBaseDir = "$projectDir/src/generated"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion"
    compile "io.grpc:grpc-all:$grpcVersion"
    compile 'io.github.microutils:kotlin-logging:1.4.4'
    compile 'org.slf4j:slf4j-simple:1.7.25'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java")
        sourceDirs += file("${projectDir}/src/generated/main/grpc")
    }
}

task runServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'ru.spbau.mit.softwaredesign.server.ServerKt'
}

task runClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'ru.spbau.mit.softwaredesign.client.ClientKt'
}

startScripts.enabled = false

task simpleServer(type: CreateStartScripts) {
    mainClassName = "ru.spbau.mit.softwaredesign.server.ServerKt"
    applicationName = "server"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task simpleClient(type: CreateStartScripts) {
    mainClassName = "ru.spbau.mit.softwaredesign.client.ClientKt"
    applicationName = "client"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into("bin") {
    from(simpleServer)
    from(simpleClient)
    fileMode = 0755
}
